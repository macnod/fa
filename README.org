#+title: OneLogin Coding Challenge
#+title: Fractions Arithmetic
#+author: Donnie Cameron
#+email: root@sinistercode.com

* Problem
Write a command line program in the language of your choice that will take operations on fractions as an input and produce a fractional result.

  * Legal operators shall be *, /, +, - (multiply, divide, add, subtract).
  * Operands and operators shall be separated by one or more spaces.
  * Mixed numbers will be represented by whole_numerator/denominator. e.g. "3_1/4"
  * Improper fractions and whole numbers are also allowed as operands
** Example 1
#+begin_example
? 1/2 * 3_3/4
= 1_7/8
#+end_example
** Example 2
#+begin_example
? 2_3/8 + 9/8
= 3_1/2
#+end_example
* Interpretation
I've interpreted the problem description not so much as a specification, but rather as a set of constraints on expected functionality. Therefore, because the problem description doesn't address negative numbers or provide a limit to the number of operators and operands that can form an expression, I've included support for both negative numbers and for unlimited operators and operands.  Similarly, given that the description contains no mention of operator precedence, I've incorporated operator precedence according to the standard rules of mathematics.
* Running the Example
To run the example, copy the project to your computer, change into the projects directory, and run the program FractionalArithmetic with a single string representing the expression that you want to evaluate.  Here's an example of how to do all of that:
#+begin_src sh
git clone fa
cd fa
./FractionsArithmetic.py '10_3/2 - 1/2 * 3 - 4_1/4'
#+end_src
The above FractionsArithmetic.py command should give you the following result: '5_3/4'

Here are some more examples (results in commented lines):
#+begin_src sh
./FractionsArithmetic.py '5 * 5'
# 35

./FractionsArithmetic.py '0 / 1_1/4'
# 0

./FractionsArithmetic.py '5 * 5 + 25 + 50 / 10 - 4_21/42'
# 50_1/2
#+end_src
* Implementation
I've implemented most of the functionality of the program using a doubly-linked list.  This allows me to easily obtain the values for an operator (previous node and next node) and to remove the associated nodes when I've computed the result.  Removing a node of a doubly-linked list is an O(1) operation, so the program progresses efficiently computing subexpressions in the list.

The program is implemented as a Python module that can be easily imported, but can run as a stand-alone command-line utility as well.

For an example of how to import the module and use it in another program, see the FractionsArithmeticTests.py code.
* Tests
I've included tests with this implementation.  You can run them by changing to the project's directory and typing the following command:
#+begin_src sh
./FractionArithmeticTests.py
#+end_src
